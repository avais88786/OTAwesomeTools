@model IEnumerable<IEnumerable<OpenTraderSunFixes.Model.ViewModel.ExternalServiceItems.CurrentExternalServiceEntries>>

<table class="SpannedTable">
    <tr>
        <th>Scheme</th>
        <th>Status</th>
    </tr>
@{var BusinessLine = string.Empty; 
  foreach (var scheme in Model)
  {
      var businessLine = scheme.FirstOrDefault().BusinessLine;
      var NBTest = scheme.FirstOrDefault(s => s.Type.Equals("NB") && !s.IsLive);
      var NBLive = scheme.FirstOrDefault(s => s.Type.Equals("NB") && s.IsLive);
      var NBAsync = scheme.FirstOrDefault(s => s.Type.Equals("NB Async"));
      var NBAccTest = scheme.FirstOrDefault(s => s.Type.Equals("NB Acc") && !s.IsLive);
      var NBAccLive = scheme.FirstOrDefault(s => s.Type.Equals("NB Acc") && s.IsLive);
      var NBAccAsync = scheme.FirstOrDefault(s => s.Type.Equals("NB Acc Async"));
      var MTATest = scheme.FirstOrDefault(s => s.Type.Equals("MTA") && !s.IsLive);
      var MTALive = scheme.FirstOrDefault(s => s.Type.Equals("MTA") && s.IsLive);
      var MTAAsync = scheme.FirstOrDefault(s => s.Type.Equals("MTA Async"));
      var MTAAccTest = scheme.FirstOrDefault(s => s.Type.Equals("MTA Acc") && !s.IsLive);
      var MTAAccLive = scheme.FirstOrDefault(s => s.Type.Equals("MTA Acc") && s.IsLive);
      var MTAAccAsync = scheme.FirstOrDefault(s => s.Type.Equals("MTA Acc Async"));

      if (!string.IsNullOrEmpty(businessLine) && !businessLine.Equals(BusinessLine))
      {
          <tr>
              <td style="font-weight:bold" colspan="2" align="center">
                  @BusinessLine
                  @{BusinessLine = businessLine;}
              </td>
          </tr>
      }
      
      <tr>
        <td><label style="cursor:pointer" data-onclick="clicked">@scheme.FirstOrDefault().SchemeName</label> 
         <div>
             <table class="SpannedTableHidden">
                 <tr>
                     <th>Stage</th>
                     <th>Value</th>
                 </tr>
                 @{
                      ViewData["Stage"] = "New Business";
                      ViewData["TestEndpointName"] = @NBTest == null ? null : @NBTest.EndpointName;
                      ViewData["LiveEndpointName"] = @NBLive == null ? null : @NBLive.EndpointName;
                      ViewData["SoapAction"] = @NBTest == null ? null : @NBTest.SoapAction;
                      ViewData["DelayedSoapAction"] = @NBAsync == null ? null : @NBAsync.SoapAction;

                      @Html.RenderPartial(@"Partial\_PartialWhatDoIHaveSubEntries");

                      ViewData["Stage"] = "NB Acceptance";
                      ViewData["TestEndpointName"] = @NBAccTest == null ? null : @NBAccTest.EndpointName;
                      ViewData["LiveEndpointName"] = @NBAccLive == null ? null : @NBAccLive.EndpointName;
                      ViewData["SoapAction"] = @NBAccTest == null ? null : @NBAccTest.SoapAction;
                      ViewData["DelayedSoapAction"] = @NBAccLive == null ? null : @NBAccLive.SoapAction;

                      @Html.RenderPartial(@"Partial\_PartialWhatDoIHaveSubEntries");

                      ViewData["Stage"] = "MTA";
                      ViewData["TestEndpointName"] = @MTATest == null ? null : @MTATest.EndpointName;
                      ViewData["LiveEndpointName"] = @MTALive == null ? null : @MTALive.EndpointName;
                      ViewData["SoapAction"] = @MTATest == null ? null : @MTATest.SoapAction;
                      ViewData["DelayedSoapAction"] = @MTAAsync == null ? null : @MTAAsync.SoapAction;

                      @Html.RenderPartial(@"Partial\_PartialWhatDoIHaveSubEntries");

                      ViewData["Stage"] = "MTA Acceptance";
                      ViewData["TestEndpointName"] = @MTAAccTest == null ? null : @MTAAccTest.EndpointName;
                      ViewData["LiveEndpointName"] = @MTAAccLive == null ? null : @MTAAccLive.EndpointName;
                      ViewData["SoapAction"] = @MTAAccTest == null ? null : @MTAAccTest.SoapAction;
                      ViewData["DelayedSoapAction"] = @MTAAccAsync == null ? null : @MTAAccAsync.SoapAction;

                      @Html.RenderPartial(@"Partial\_PartialWhatDoIHaveSubEntries");
                      
                   }
             </table>
         </div>
          
          
         </td>

        @{
          var asyncs = scheme.Where(s => s.Type.Contains("Async")).Select(s2 => s2.Type).Distinct().Count();
          var syncs = scheme.Where(s => !s.Type.Contains("Async")).Select(s2 => s2.Type).Distinct().Count();
          var testServices = scheme.Where(s => !s.IsLive).Select(s2 => s2.Type).Count();
          var liveServices = scheme.Where(s => s.IsLive).Select(s2 => s2.Type).Count();

          if (asyncs < 2 || syncs < 4 || testServices < 6 || liveServices < 6) 
          { 
              <td style="color: #CC0000;">DataRequired</td>
          }
          else
          {
              <td style="color:green;">Everything Configured</td>
          }
}
      </tr>
      
  }
      
      
}


</table>
<br/>
<br />
@*<table class="SpannedTable">
    <tr>
        <th>Scheme</th>
        <th>Asyncs Present</th>
        <th>Syncs Present</th>
        <th>Test Services Present</th>
        <th>Live Services Present</th>
    </tr>
@{ foreach (var scheme in Model)
 {
    <tr>
        <td>@scheme.FirstOrDefault().RiskID</td>
        @{
            var asyncs = string.Join(",", scheme.Where(s => s.Type.Contains("Async")).Select(s2 => s2.Type).Distinct());
            var syncs = string.Join(",", scheme.Where(s => !s.Type.Contains("Async")).Select(s2 => s2.Type).Distinct());
            var testServices = string.Join(",", scheme.Where(s => !s.IsLive).Select(s2=>s2.Type));
            var liveServices = string.Join(",", scheme.Where(s => s.IsLive).Select(s2 => s2.Type));
            <td>@asyncs</td>
            <td>@syncs</td>
            <td>@testServices</td>
            <td>
                @if(string.IsNullOrEmpty(liveServices)){
                    @Html.Label("", "Nothing Configured", new { style = "color:#780000;" })
                }
                else { 
                    @liveServices
                }
            </td>
         }
    </tr>

 }
}
</table>*@
