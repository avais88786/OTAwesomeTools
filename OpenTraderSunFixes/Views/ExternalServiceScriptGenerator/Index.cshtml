@model OpenTraderSunFixes.Model.ViewModel.ExternalServiceItems.ExternalServiceScriptViewModel



<!DOCTYPE html>

@Styles.Render("~/Content/bootstrap.css")
@Scripts.Render("~/Scripts/jquery-1.10.2.min.js")
@Scripts.Render("~/Scripts/jquery.validate.js")
@Scripts.Render("~/Scripts/jquery.validate.unobtrusive.min.js")
@Scripts.Render("~/Scripts/jquery.unobtrusive-ajax.js")
@Scripts.Render("~/Scripts/jQuery/externalservice.js")
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>

@section leftHeading{
     iMarket - External Services
}

<body style="margin: 15px;">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)
    
        <h3>External Service Script Generator: Lazy of editing and maintaining the existing script to insert and update external service values ? Use Me ! </h3>
        <fieldset style="background: #4f84b8; padding: 15px;border-radius: 5px;">

            @Html.DisplayNameFor(model => model.ConnectionDetails.DataSource)

            @Html.TextBoxFor(model => model.ConnectionDetails.DataSource,new {@readonly="readonly",@class="spanElements"})

            @Html.DisplayNameFor(model => model.ConnectionDetails.InitialCatalog)

            @Html.TextBoxFor(model => model.ConnectionDetails.InitialCatalog, new { @readonly = "readonly", @class = "spanElements" })
            <br/><br/>

            <div id="scriptingArea">
                <div class="editor-label">
                    @Html.LabelFor(model => model.ScriptTypeSingleSchemeOnly)
                </div>

                <div class="editor-field" style="margin-left:20px;">
                    @Html.RadioButtonFor(model => model.ScriptTypeSingleSchemeOnly, true, new { id = "radio1" }) <label for="radio1">Script this scheme only</label>
                    <br />
                    @Html.RadioButtonFor(model => model.ScriptTypeSingleSchemeOnly, false, new { id = "radio2" }) <label for="radio2"> Script this scheme and all existing values from database </label>
                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.SchemeId)
                </div>
                <div class="editor-field" style="margin-left:20px;">
                    @Html.EditorFor(model => model.SchemeId)
                    <label>Scheme Name : </label>

                    <img id="loadingImage" src="~/Content/Images/loader.gif" hidden="hidden" />
                    <label id="SchemeNameLabel" style="color:red;"></label>

                    @Html.HiddenFor(model => model.SchemeName)
                </div>

                <div id="ratingengineplaceholder">

                </div>

                <div class="editor-label">
                    @Html.LabelFor(model => model.ExternalServiceTypes)
                </div>


                <table class="table" style="margin-left:20px;">
                    <tr>
                        <th>@Html.LabelFor(model => model.ExternalServiceTypes)</th>
                        <th>@Html.LabelFor(model => model.ExternalServiceNames)</th>
                        <th>@Html.LabelFor(model => model.Description)</th>
                        <th>@Html.LabelFor(model => model.URL)</th>
                        <th>@Html.LabelFor(model => model.SoapAction)</th>
                        <th>@Html.LabelFor(model => model.RequestTransforms)</th>
                        <th>@Html.LabelFor(model => model.ResponseTransforms)</th>
                        <th>@Html.LabelFor(model => model.TransformConfigs)</th>
                        <th>@Html.LabelFor(model => model.iMarketResponseTypes)</th>
                        <th>@Html.LabelFor(model => model.isLive)</th>

                    </tr>


                    @{int i = 0,j=0; }
                    @foreach (var item in Model.ExternalStypes)
                    {
                        //i = Convert.ToInt32(item.Value);
                        <tr>
                            <td>
                                <input type="checkbox"
                                       style="display: inline-block"
                                       name=@Html.Raw("ExternalServiceTypesCheckBox[" + @i + "]")
                                       id=@Html.Raw("ExternalServiceTypesCheckBox[" + @i + "]")
                                       data-index=@i
                                       value=@i />
                                <label for="@Html.Raw("ExternalServiceTypes[" + @i + "]")" style="display: inline-block">  @item.Text</label>
                                @Html.Hidden("ExternalServiceTypesCheckBox.Index", @i)
                                @Html.Hidden("ExternalServiceTypes", @item.Value)
                                @Html.Hidden("ExternalServiceTypes.Index", @i)
                            </td>

                            <td>
                                @Html.TextBox("ExternalServiceNames[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Service Name for " + @item.Text })
                                @Html.Hidden("ExternalServiceNames.Index", @i)
                            </td>
                            <td>
                                @Html.TextBox("Description[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Description for " + @item.Text })
                                @Html.Hidden("Description.Index", @i)
                            </td>
                            <td>
                                @Html.TextBox("URL[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Ext Service Url for " + @item.Text })
                                @Html.Hidden("URL.Index", @i)
                            </td>
                            <td>
                                @Html.TextBox("SoapAction[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "SOAP Action for " + @item.Text })
                                @Html.Hidden("SoapAction.Index", @i)
                            </td>
                            <td data-index=@i>
                                @Html.TextBox("RequestTransforms[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Request Transform for " + @item.Text })
                                @Html.Hidden("RequestTransforms.Index", @i)
                            </td>
                            <td data-index=@i>
                                @Html.TextBox("ResponseTransforms[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Response Transform for " + @item.Text })
                                @Html.Hidden("ResponseTransforms.Index", @i)
                            </td>
                            <td data-index=@i>
                                @Html.TextBox("TransformConfigs[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "Transform Config for " + @item.Text })
                                @Html.Hidden("TransformConfigs.Index", @i)
                            </td>
                            <td>
                                @Html.TextBox("iMarketResponseTypes[" + @i + "]", "", new { @style = "display:inline-block", placeholder = "iMarket Response Type for " + @item.Text })
                                @Html.Hidden("iMarketResponseTypes.Index", @i)
                            </td>
                            <td>
                                @Html.CheckBox("isLive[" + @i + "]", false, new { @style = "display:inline-block"})
                                @Html.Hidden("isLive.Index", @i)
                            </td>
                            @{i++;
                            }
                        </tr>
                    }
                </table>



                @Html.HiddenFor(model => model.ExternalStypes)



                <p>
                    <input type="submit" value="Generate Script" />
                </p>
            </div>
</fieldset>
    }
    
</body>
</html>
