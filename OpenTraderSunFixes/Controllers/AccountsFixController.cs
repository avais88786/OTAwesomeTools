using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using OpenTraderSunFixes.GeneratedModel;
using OpenTraderSunFixes.Repository.EF;
using OpenTraderSunFixes.Repository;
using OpenTraderSunFixes.Model.GeneratedModel;
using System.Runtime.InteropServices;
using System.Xml;
using OpenTraderSunFixes.Helpers;
using OpenTraderSunFixes.DomainService;
using OpenTraderSunFixes.Model;
using OpenTraderSunFixes.Model.ViewModel;
using System.IO;
using System.IO.Compression;
using System.Threading;

namespace OpenTraderSunFixes.GeneratedModel.Controllers
{
    public class AccountsFixController : Controller
    {
        private ISunService sunService;
        private readonly string zipFileName = "AccountsFix.zip";

        public AccountsFixController(ISunService _sunService)
        {
            sunService = _sunService;
            
        }

        // GET: SUN
        public ActionResult Index(string searchText = null)
        {

            
            @ViewBag.SearchText = searchText;
            return View("SearchResults", sunService.GetCreditControlTransaction(searchText));
        }

        //public JsonResult Upload(HttpPostedFileBase collection)
        //{
        //    string fileName = Request.Headers["X-File-Name"];
        //    string fileType = Request.Headers["X-File-Type"];
        //    int fileSize = int.Parse(Request.Headers["X-File-Size"]);
        //    System.IO.Stream fileContent = Request.InputStream;
        //    System.IO.FileStream fileStream = System.IO.File.Create(Server.MapPath("~/") + fileName);
        //    fileContent.Seek(0, System.IO.SeekOrigin.Begin);
        //    fileContent.CopyTo(fileStream);
        //    fileStream.Dispose();

        //    return Json("Uploaded files");
        //}

        public string Upload2(FormCollection files)
        {
            string rootPath = Path.Combine(Server.MapPath("~/"), "Temp");
            string tempFolderFixPath = Path.Combine(rootPath, DateTime.Now.ToString("yyyyMMddHHmmss"));
            Directory.CreateDirectory(tempFolderFixPath);
            for (int counter = 0; counter < Request.Files.Count;counter++)
                //foreach (HttpPostedFileBase file in Request.Files) -- cant use this :(
                {
                    using (Stream fileContentStream = new MemoryStream())
                    {
                        Request.Files[counter].InputStream.CopyTo(fileContentStream);

                        SunFixAttributes sunFixAttributes = new SunFixAttributes() {SunFixType = Model.SunFixType.Sun, BusinessUnit = "PPL" };
                        string liveXML = sunService.ProcessXMLFromStream(fileContentStream, sunFixAttributes);
                        
                        using(StreamWriter fileStream = System.IO.File.CreateText(Path.Combine(tempFolderFixPath,Request.Files[counter].FileName))){
                            fileStream.Write(liveXML);
                            
                        }
                    }
                }
            if (System.IO.File.Exists(Path.Combine(rootPath, zipFileName)))
            {
                System.IO.File.Delete(Path.Combine(rootPath, zipFileName));
            }

            ZipFile.CreateFromDirectory(tempFolderFixPath, Path.Combine(rootPath, zipFileName));

            Directory.Delete(tempFolderFixPath,true);


            return (zipFileName);

            //var cd = new System.Net.Mime.ContentDisposition
            //{
            //    FileName = "avais.zip",
            //    // always prompt the user for downloading, set to true if you want 
            //    // the browser to try to show the file inline
            //    Inline = false,
            //};
            //Response.AppendHeader("Content-Disposition", cd.ToString());
            //return File(Path.Combine(rootPath, "AccountsFix.zip"), "application/octet-stream");
            //return null;
        }
        //#region NeverUsedAutoGeneratedMethods
        //public ActionResult Search(string searchText = null)
        //{
        //    if (TempData["TransactionTypeError"] != null)
        //        ModelState.AddModelError("TransactionType", "*TransactionType required");

        //    if (TempData["BusinessUnitError"] != null)
        //        ModelState.AddModelError("BusinessUnit", "*Type Of Business Unit required");



        //    return View("Index",sunService.GetCreditControlTransaction(searchText));
        //}


       
        //// GET: SUN/Details/5
        //public ActionResult Details(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    CCTransaction cCTransaction = db.CCTransaction.Find(id);
        //    if (cCTransaction == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(cCTransaction);
        //}

        //// GET: SUN/Create
        //public ActionResult Create()
        //{
        //    ViewBag.CCTransactionId = new SelectList(db.CCExternalTransactionProcess, "CCTransactionId", "ErrorXML");
        //    ViewBag.CCOpenPremiumTypeId = new SelectList(db.CCOpenPremiumType, "CCOpenPremiumTypeId", "Description");
        //    ViewBag.CCOpenTransactionTypeId = new SelectList(db.CCOpenTransactionType, "CCOpenTransactionTypeId", "Description");
        //    ViewBag.CCPaymentTypeId = new SelectList(db.CCPaymentType, "CCPaymentTypeId", "Description");
        //    ViewBag.CCTransactionStatusId = new SelectList(db.CCTransactionStatus, "CCTransactionStatusId", "Description");
        //    return View();
        //}

        //// POST: SUN/Create
        //// To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        //// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Create([Bind(Include = "CCTransactionId,RiskId,CCTransactionStatusId,CCPaymentTypeId,CCAccountingPeriodId,Amount,Reference,PaymentDate,EffectiveDate,ProcessDate,CurrencyId,CreatorUserId,CreatorCompanyId,CreationDate,LastUpdateUserId,LastUpdatedDate,SettlementDate,Comments,CCOpenTransactionTypeId,BrokerCompanyId,InsurerCompanyId,ClientCompanyId,BrokerReference,CCOpenPremiumTypeId,HasBeenReversed,ReversesCCTransactionId")] CCTransaction cCTransaction)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        db.CCTransaction.Add(cCTransaction);
        //        db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }

        //    ViewBag.CCTransactionId = new SelectList(db.CCExternalTransactionProcess, "CCTransactionId", "ErrorXML", cCTransaction.CCTransactionId);
        //    ViewBag.CCOpenPremiumTypeId = new SelectList(db.CCOpenPremiumType, "CCOpenPremiumTypeId", "Description", cCTransaction.CCOpenPremiumTypeId);
        //    ViewBag.CCOpenTransactionTypeId = new SelectList(db.CCOpenTransactionType, "CCOpenTransactionTypeId", "Description", cCTransaction.CCOpenTransactionTypeId);
        //    ViewBag.CCPaymentTypeId = new SelectList(db.CCPaymentType, "CCPaymentTypeId", "Description", cCTransaction.CCPaymentTypeId);
        //    ViewBag.CCTransactionStatusId = new SelectList(db.CCTransactionStatus, "CCTransactionStatusId", "Description", cCTransaction.CCTransactionStatusId);
        //    return View(cCTransaction);
        //}

        //// GET: SUN/Edit/5
        //public ActionResult Edit(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    CCTransaction cCTransaction = db.CCTransaction.Find(id);
        //    if (cCTransaction == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    ViewBag.CCTransactionId = new SelectList(db.CCExternalTransactionProcess, "CCTransactionId", "ErrorXML", cCTransaction.CCTransactionId);
        //    ViewBag.CCOpenPremiumTypeId = new SelectList(db.CCOpenPremiumType, "CCOpenPremiumTypeId", "Description", cCTransaction.CCOpenPremiumTypeId);
        //    ViewBag.CCOpenTransactionTypeId = new SelectList(db.CCOpenTransactionType, "CCOpenTransactionTypeId", "Description", cCTransaction.CCOpenTransactionTypeId);
        //    ViewBag.CCPaymentTypeId = new SelectList(db.CCPaymentType, "CCPaymentTypeId", "Description", cCTransaction.CCPaymentTypeId);
        //    ViewBag.CCTransactionStatusId = new SelectList(db.CCTransactionStatus, "CCTransactionStatusId", "Description", cCTransaction.CCTransactionStatusId);
        //    return View(cCTransaction);
        //}

        //// POST: SUN/Edit/5
        //// To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        //// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Edit([Bind(Include = "CCTransactionId,RiskId,CCTransactionStatusId,CCPaymentTypeId,CCAccountingPeriodId,Amount,Reference,PaymentDate,EffectiveDate,ProcessDate,CurrencyId,CreatorUserId,CreatorCompanyId,CreationDate,LastUpdateUserId,LastUpdatedDate,SettlementDate,Comments,CCOpenTransactionTypeId,BrokerCompanyId,InsurerCompanyId,ClientCompanyId,BrokerReference,CCOpenPremiumTypeId,HasBeenReversed,ReversesCCTransactionId")] CCTransaction cCTransaction)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        db.Entry(cCTransaction).State = EntityState.Modified;
        //        db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }
        //    ViewBag.CCTransactionId = new SelectList(db.CCExternalTransactionProcess, "CCTransactionId", "ErrorXML", cCTransaction.CCTransactionId);
        //    ViewBag.CCOpenPremiumTypeId = new SelectList(db.CCOpenPremiumType, "CCOpenPremiumTypeId", "Description", cCTransaction.CCOpenPremiumTypeId);
        //    ViewBag.CCOpenTransactionTypeId = new SelectList(db.CCOpenTransactionType, "CCOpenTransactionTypeId", "Description", cCTransaction.CCOpenTransactionTypeId);
        //    ViewBag.CCPaymentTypeId = new SelectList(db.CCPaymentType, "CCPaymentTypeId", "Description", cCTransaction.CCPaymentTypeId);
        //    ViewBag.CCTransactionStatusId = new SelectList(db.CCTransactionStatus, "CCTransactionStatusId", "Description", cCTransaction.CCTransactionStatusId);
        //    return View(cCTransaction);
        //}

        //// GET: SUN/Delete/5
        //public ActionResult Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    CCTransaction cCTransaction = db.CCTransaction.Find(id);
        //    if (cCTransaction == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(cCTransaction);
        //}

        //// POST: SUN/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public ActionResult DeleteConfirmed(int id)
        //{
        //    CCTransaction cCTransaction = db.CCTransaction.Find(id);
        //    db.CCTransaction.Remove(cCTransaction);
        //    db.SaveChanges();
        //    return RedirectToAction("Index");
        //}

        //#endregion

        [HttpPost]
        public ActionResult GenerateFix(SunFixAttributes sunFixAttributes) //-- On explicit Binding see Class
        {
            
            CCTransaction ccTransaction = sunService.GetTransactionByCCTransactionId(sunFixAttributes.CCTransactionId);

           

            if (!ModelState.IsValid)
            {
                List<String> errorMessages = new List<String>();
                ModelState.Values.ToList().ForEach(modelStateValues =>
                {
                    if (modelStateValues.Errors.Count > 0)
                    {
                        errorMessages.AddRange(modelStateValues.Errors.Select(error => error.ErrorMessage));
                    }
                });
                
                @ViewBag.Error = errorMessages.Select(e => e);
                @ViewBag.SearchText = ccTransaction.BrokerReference;
                return View("SearchResults", sunService.GetCreditControlTransaction(ccTransaction.BrokerReference));
            }

            string generatedFix = sunService.GetFix(sunFixAttributes);

            GeneratedXMLModel viewModel = new GeneratedXMLModel();
            viewModel.GeneratedFix = generatedFix;
            viewModel.SunFixType = sunFixAttributes.SunFixType;
            viewModel.PPReference = ccTransaction.Reference;
            viewModel.transactionType = sunFixAttributes.TransactionType;

            return View("GeneratedFix",viewModel);
            
        }


        [HttpPost]
        public ActionResult GenerateXMLFromScript(String scriptToBeExecuted, SunFixAttributes sunFixAttributes)
        {
            string generatedXml = sunService.GenerateXMLFromScript(scriptToBeExecuted,sunFixAttributes);
            return Json(generatedXml);
        }

        [ValidateInput(false)]
        public ActionResult Download(GeneratedXMLModel generatedViewModel,string filename = null)
        {
            //taken from stackoverflow : http://stackoverflow.com/questions/11260550/calling-save-dialog-box-from-javascript
            var document = generatedViewModel.GeneratedFix;
            string _filename;

            if (filename == null) { 
                var y = Enum.Parse(typeof(SunTransactionType), SunTransactionType.CONTRA.ToString());
                _filename = generatedViewModel.PPReference;
            
                if (generatedViewModel.SunFixType == SunFixType.Sun)
                    _filename =  _filename + "_" +  generatedViewModel.transactionType.ToString();

            }
            else
            {
                _filename = filename;
            }
            var cd = new System.Net.Mime.ContentDisposition
            {
                FileName = _filename, 
                // always prompt the user for downloading, set to true if you want 
                // the browser to try to show the file inline
                Inline = false, 
            };
            //Response.AppendHeader("Content-Disposition", cd.ToString());
            if (filename == null)
                if (generatedViewModel.SunFixType == SunFixType.Trader)
                    return File(new System.Text.UTF8Encoding().GetBytes(document), "application/octet-stream", _filename+".sql");
                else
                    return File(new System.Text.UTF8Encoding().GetBytes(document), "application/octet-stream", _filename+".xml");
            else{
                string filePath = Path.Combine(Server.MapPath("~/"), "Temp",filename);
                return File(filePath, "application/octet-stream", DateTime.Now.ToString("yyyyMMddHHmm")+".zip");
            }
                
        }

        //public ActionResult CurtainDisplayTest()
        //{
        //    return View();
        //}


        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //    {
        //        db.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}
    }
}
